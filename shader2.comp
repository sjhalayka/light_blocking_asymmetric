#version 430

layout(local_size_x = 32, local_size_y = 32) in;

layout(binding = 0, rgba32f) writeonly uniform image2D output_image; // large tex
layout(binding = 1, rgba32f) readonly uniform image2D input_image; // large tex
layout(binding = 2, rgba32f) readonly uniform image2D input_light_image; // large tex
layout(binding = 3, rgba32f) readonly uniform image2D input_light_blocking_image; // large tex
//layout(binding = 4, rgba32f) readonly uniform image2D input_coordinates_image; // large tex
layout(binding = 5, rgba32f) readonly uniform image2D output_light_image; // large tex



uniform ivec2 u_size;
uniform ivec2 u_size_small;
uniform ivec2 u_chunk_index;










vec3 get_direct_light_at_screen_coord(ivec2 per_image_pixel_coords)
{
	return imageLoad(output_light_image, per_image_pixel_coords).rgb;
}





float stepAndOutputRNGFloat(inout uint rngState)
{
  // Condensed version of pcg_output_rxs_m_xs_32_32, with simple conversion to floating-point [0,1].
  rngState  = rngState * 747796405 + 1;
  uint word = ((rngState >> ((rngState >> 28) + 4)) ^ rngState) * 277803737;
  word      = (word >> 22) ^ word;
  return float(word) / 4294967295.0f;
}



uint prng_state = 0;


vec3 get_indirect_light_at_screen_coord(int samples, ivec2 per_compute_pixel_coords)
{
	ivec2 global_per_compute_pixel_coords = per_compute_pixel_coords;

	prng_state = global_per_compute_pixel_coords.y * u_size_small.x + global_per_compute_pixel_coords.x;

	float energy = 0;

	vec3 lighting = vec3(energy, energy, energy);

	for(int s = 0; s < samples; s++)
	{
		int random_x = int(stepAndOutputRNGFloat(prng_state)*(u_size_small.x - 1.0f));
		int random_y = int(stepAndOutputRNGFloat(prng_state)*(u_size_small.y - 1.0f));
	
		vec4 light_image_sample = imageLoad(input_light_image, ivec2(random_x, random_y));

		// A light
		if(light_image_sample.x != 0 || light_image_sample.y != 0 || light_image_sample.z != 0) 
			continue;


			vec2 pixel_diff;
			pixel_diff.x = distance(global_per_compute_pixel_coords.x, random_x);
			pixel_diff.y = distance(global_per_compute_pixel_coords.y, random_y);

			int num_steps = int(length(pixel_diff));

			// Please forgive my use of a magic number
			if(num_steps < 10)
				num_steps = 10;

			const vec2 end = vec2(random_x, random_y);
			const vec2 start = global_per_compute_pixel_coords;

			bool found_light_blocker = false;
			vec2 curr_uv;
			ivec2 curr_uv_i;

			for(int s = 0; s < num_steps; s++)
			{
				curr_uv = mix(start, end, float(s) / float(num_steps - 1));

				curr_uv_i.x = int(curr_uv.x);
				curr_uv_i.y = int(curr_uv.y);

				vec4 light_blocking_image_sample = imageLoad(input_light_blocking_image, curr_uv_i);

				if(light_blocking_image_sample.x == 1 && light_blocking_image_sample.y == 1 && light_blocking_image_sample.z == 1)
				{
					found_light_blocker = true;
					break;
				}
			}

				// Convert from screen space to some other coordinate system,
				// so that attenuation works much better
				//const float coordinate_change = 1.0 / 1.0;
				
				const float dist = distance(start, curr_uv_i);// * coordinate_change; 
				const float dist_coefficient = 1;
				const float dist_squared_coefficient = 1;

				const float attenuation = 1.0 / (1.0f + dist_coefficient * dist + dist_squared_coefficient * dist*dist);


			if(found_light_blocker == true)
			{
				lighting += get_direct_light_at_screen_coord(curr_uv_i)*attenuation;
			}
			else
			{
				lighting += get_direct_light_at_screen_coord(ivec2(mix(start, end, 0.5f)));//*attenuation;
			}
	
	}



	return lighting / samples;
}



void main()
{
	ivec2 per_compute_pixel_coords = ivec2(gl_GlobalInvocationID.xy);

	vec4 image_sample = imageLoad(input_image, per_compute_pixel_coords);

	// Black pixels are still black when lit, so skip lighting altogether
	if(image_sample.x == 0 && image_sample.y == 0 && image_sample.z == 0)
	{
		imageStore(output_image, per_compute_pixel_coords, vec4(0, 0, 0, 1));
		return;
	}



	vec3 lighting = get_direct_light_at_screen_coord(per_compute_pixel_coords);
	
	lighting += 1000*get_indirect_light_at_screen_coord(1000, per_compute_pixel_coords);

	if(length(lighting) > 1)
	lighting = normalize(lighting);

//	lighting = clamp(lighting, 0, 1);
	lighting = max(lighting, 0.001); // Throw in some ambient lighting
	

	imageStore(output_image, per_compute_pixel_coords, vec4(lighting, 1.0));
}